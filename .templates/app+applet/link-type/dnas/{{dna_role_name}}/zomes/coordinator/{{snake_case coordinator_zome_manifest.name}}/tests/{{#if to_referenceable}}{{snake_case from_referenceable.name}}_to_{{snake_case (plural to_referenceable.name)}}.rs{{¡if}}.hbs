#![allow(dead_code)]
#![allow(unused_variables)]
#![allow(unused_imports)]

use hdk::prelude::*;
use holochain::test_utils::consistency_10s;
use holochain::{conductor::config::ConductorConfig, sweettest::*};

use {{snake_case coordinator_zome_manifest.name}}::{{snake_case link_type_name}}::{{#if delete}}{Remove{{pascal_case to_referenceable.name}}For{{pascal_case from_referenceable.name}}Input, Add{{pascal_case to_referenceable.name}}For{{pascal_case from_referenceable.name}}Input }{{else}}Add{{pascal_case to_referenceable.name}}For{{pascal_case from_referenceable.name}}Input{{/if}};

{{#if (or (ne from_referenceable.hash_type "AgentPubKey") (ne to_referenceable.hash_type "AgentPubKey"))}}
mod common;
{{/if}}

{{#if (ne from_referenceable.hash_type "AgentPubKey")}}
use common::{create_{{snake_case from_referenceable.name}}, sample_{{snake_case from_referenceable.name}}_1};
{{/if}}
{{#if (ne to_referenceable.hash_type "AgentPubKey")}}
use common::{create_{{snake_case to_referenceable.name}}, sample_{{snake_case to_referenceable.name}}_1};
{{/if}}

#[tokio::test(flavor = "multi_thread")]
async fn link_a_{{snake_case from_referenceable.name}}_to_a_{{snake_case to_referenceable.name}}() {
    // Use prebuilt dna file
    let dna_path = std::env::current_dir()
        .unwrap()
        .join("../../../workdir/{{dna_role_name}}.dna");
    let dna = SweetDnaFile::from_bundle(&dna_path).await.unwrap();

    // Set up conductors
    let mut conductors = SweetConductorBatch::from_config(2, ConductorConfig::default()).await;
    let apps = conductors.setup_app("{{dna_role_name}}", &[dna]).await.unwrap();
    conductors.exchange_peer_info().await;

    let ((alice,), (bobbo,)) = apps.into_tuples();
    
    let alice_zome = alice.zome("{{snake_case coordinator_zome_manifest.name}}");
    let bob_zome = bobbo.zome("{{snake_case coordinator_zome_manifest.name}}");

{{#if (eq from_referenceable.hash_type "AgentPubKey")}}
    let base_address = alice.agent_pubkey().clone();
{{else}}
    let base_record = create_{{snake_case from_referenceable.name}}(&conductors[0], &alice_zome, sample_{{snake_case from_referenceable.name}}_1(&conductors[0], &alice_zome).await).await;
  {{#if (eq from_referenceable.hash_type "EntryHash")}}
    let base_address = base_record.signed_action.hashed.content.entry_hash().unwrap().clone();
  {{else}}
    let base_address = base_record.signed_action.hashed.hash.clone();
  {{/if}}
{{/if}}
{{#if (eq to_referenceable.hash_type "AgentPubKey")}}
    let target_address = alice.agentPubKey;
{{else}}
    let target_record = create_{{snake_case to_referenceable.name}}(&conductors[0], &alice_zome, sample_{{snake_case to_referenceable.name}}_1(&conductors[0], &alice_zome).await).await;
  {{#if (eq to_referenceable.hash_type "EntryHash")}}
    let target_address = target_record.signed_action.hashed.content.entry_hash().unwrap().clone();
  {{else}}
    let target_address = target_record.signed_action.hashed.hash.clone();
  {{/if}}
{{/if}}

    // Bob gets the links, should be empty
    let links_output: Vec<{{#if (eq to_referenceable.hash_type "AgentPubKey")}}AgentPubKey{{else}}Record{{/if}}> = conductors[1]
        .call(&bob_zome, "get_{{plural (snake_case to_referenceable.name)}}_for_{{snake_case from_referenceable.name}}", base_address.clone()).await;
    assert_eq!(links_output.len(), 0);

    // Alice creates a link from {{pascal_case from_referenceable.name}} to {{pascal_case to_referenceable.name}}
    let _result: () = conductors[0]
        .call(&alice_zome, "add_{{snake_case to_referenceable.name}}_for_{{snake_case from_referenceable.name}}", Add{{pascal_case to_referenceable.name}}For{{pascal_case from_referenceable.name}}Input {
        base_{{snake_case from_referenceable.singular_arg}}: base_address.clone(),
        target_{{snake_case to_referenceable.singular_arg}}: target_address.clone()
     }).await;
        
    consistency_10s([&alice, &bobbo]).await;

    // Bob gets the links again
    let links_output: Vec<{{#if (eq to_referenceable.hash_type "AgentPubKey")}}AgentPubKey{{else}}Record{{/if}}> = conductors[1]
        .call(&bob_zome, "get_{{plural (snake_case to_referenceable.name)}}_for_{{snake_case from_referenceable.name}}", base_address.clone()).await;
    assert_eq!(links_output.len(), 1);
{{#if (ne to_referenceable.hash_type "AgentPubKey")}}
    assert_eq!(target_record, links_output[0]);
{{/if}}

{{#if bidireccional}}

    // Bob gets the links in the inverse 
    let links_output: Vec<{{#if (eq from_referenceable.hash_type "AgentPubKey")}}AgentPubKey{{else}}Record{{/if}}> = conductors[1]
        .call(&bob_zome, "get_{{plural (snake_case from_referenceable.name)}}_for_{{snake_case to_referenceable.name}}", target_address.clone()).await;
    assert_eq!(links_output.len(), 1);
  {{#if (ne from_referenceable.hash_type "AgentPubKey")}}
    assert_eq!(base_record, links_output[0]);
  {{/if}}
{{/if}}

{{#if delete}}
    let _result: () = conductors[0]
        .call(&alice_zome, "remove_{{snake_case to_referenceable.name}}_for_{{snake_case from_referenceable.name}}", Remove{{pascal_case to_referenceable.name}}For{{pascal_case from_referenceable.name}}Input {
        base_{{snake_case from_referenceable.singular_arg}}: base_address.clone(),
        target_{{snake_case to_referenceable.singular_arg}}: target_address.clone()
     }).await;

    consistency_10s([&alice, &bobbo]).await;

    // Bob gets the links again
    let links_output: Vec<{{#if (eq to_referenceable.hash_type "AgentPubKey")}}AgentPubKey{{else}}Record{{/if}}> = conductors[1]
        .call(&bob_zome, "get_{{plural (snake_case to_referenceable.name)}}_for_{{snake_case from_referenceable.name}}", base_address.clone()).await;
    assert_eq!(links_output.len(), 0);

  {{#if bidireccional}}
  
    // Bob gets the links in the inverse 
    let links_output: Vec<{{#if (eq from_referenceable.hash_type "AgentPubKey")}}AgentPubKey{{else}}Record{{/if}}> = conductors[1]
        .call(&bob_zome, "get_{{plural (snake_case from_referenceable.name)}}_for_{{snake_case to_referenceable.name}}", target_address.clone()).await;
    assert_eq!(links_output.len(), 0);
  {{/if}}

{{/if}}
}


