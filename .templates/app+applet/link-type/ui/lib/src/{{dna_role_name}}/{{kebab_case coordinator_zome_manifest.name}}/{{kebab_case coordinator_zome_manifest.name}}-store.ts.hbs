{{#merge_scope previous_file_content (concat "export class " (pascal_case coordinator_zome_manifest.name) "Store {" ) }}
  {{previous_scope_content}}

  /** {{title_case (plural to_referenceable.name)}} for {{title_case from_referenceable.name}} */

  {{camel_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}} = new LazyHoloHashMap(({{camel_case from_referenceable.singular_arg}}: {{from_referenceable.hash_type}}) => 
    lazyLoadAndPoll(async () => {{#if (eq to_referenceable.hash_type "AgentPubKey")}} this.client.get{{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}({{camel_case from_referenceable.singular_arg}}) {{else}} {
      const records = await this.client.get{{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}({{camel_case from_referenceable.singular_arg}});
      return records.map(r => {{#if (eq to_referenceable.hash_type "ActionHash")}}r.actionHash{{else}}r.entryHash{{/if}});
    }{{/if}}, 4000)
  );

  {{#if bidireccional}}
  {{camel_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}} = new LazyHoloHashMap(({{camel_case to_referenceable.singular_arg}}: {{to_referenceable.hash_type}}) => 
    lazyLoadAndPoll(async () => {{#if (eq from_referenceable.hash_type "AgentPubKey")}} this.client.get{{pascal_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}}({{camel_case to_referenceable.singular_arg}}) {{else}} {
      const records = await this.client.get{{pascal_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}}({{camel_case to_referenceable.singular_arg}});
      return records.map(r => {{#if (eq from_referenceable.hash_type "ActionHash")}}r.actionHash{{else}}r.entryHash{{/if}});
    }{{/if}}, 4000)
  );

  {{/if}}
{{/merge_scope}}
