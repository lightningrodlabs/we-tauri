import { ActionHash, AppAgentClient, CellType, EntryHash } from '@holochain/client';
import { html, render, TemplateResult } from 'lit';

import { ProfilesClient, ProfilesStore } from "@holochain-open-dev/profiles";

import '@holochain-open-dev/profiles/dist/elements/profiles-context.js';
import "@lightningrodlabs/we-applet/dist/elements/we-services-context.js";
import "@lightningrodlabs/we-applet/dist/elements/hrl-link.js";

import {
  Hrl,
  AppletViews,
  CrossAppletViews,
  WeApplet,
  AppletClients,
  WeServices,
} from "@lightningrodlabs/we-applet";

import './applet-main';
import './cross-applet-main';

function wrapAppletView(
  client: AppAgentClient,
  profilesClient: ProfilesClient,
  weServices: WeServices,
  innerTemplate: TemplateResult
): TemplateResult {
  return html`
    <we-services-context .services=${weServices}>
      <profiles-context .store=${new ProfilesStore(profilesClient)}>
        ${innerTemplate}
      </profiles-context>
    </we-services-context>
  `;
}

async function appletViews(
  client: AppAgentClient,
  appletId: EntryHash,
  profilesClient: ProfilesClient,
  weServices: WeServices
): Promise<AppletViews> {
  return {
    main: (element) =>
      render(
        wrapAppletView(
          client,
          profilesClient,
          weServices,
          html`
            <applet-main></applet-main>
          `
        ),
        element
      ),
    blocks: {},
    entries: {},
  };
}

async function crossAppletViews(
  applets: ReadonlyMap<EntryHash, AppletClients>, // Segmented by appletId
  weServices: WeServices
): Promise<CrossAppletViews> {
  return {
    main: (element) =>
      render(
        html`
          <we-services-context .services=${weServices}>
            <cross-applet-main .applets=${applets}></cross-applet-main>
          </we-services-context>
        `,
        element
      ),
    blocks: {},
  };
}

const applet: WeApplet = {
  appletViews,
  crossAppletViews,
  attachmentTypes: async (appletClient: AppAgentClient, _appletId: EntryHash, _weServices: WeServices) => ({}),
  search: async (appletClient: AppAgentClient, _appletId: EntryHash, _weServices: WeServices, filter: string) => {
    return [];
  },
};

export default applet;
