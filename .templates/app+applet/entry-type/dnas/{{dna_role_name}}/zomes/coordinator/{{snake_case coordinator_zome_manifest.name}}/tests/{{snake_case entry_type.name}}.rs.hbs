#![allow(dead_code)]
#![allow(unused_variables)]
#![allow(unused_imports)]

use hdk::prelude::*;
use holochain::test_utils::consistency_10s;
use holochain::{conductor::config::ConductorConfig, sweettest::*};

use {{snake_case coordinator_zome_manifest.name}}_integrity::*;

{{#if crud.update}}
use {{snake_case coordinator_zome_manifest.name}}::{{snake_case entry_type.name}}::Update{{pascal_case entry_type.name}}Input;
{{/if}}

mod common;
use common::{create_{{snake_case entry_type.name}}, sample_{{snake_case entry_type.name}}_1, sample_{{snake_case entry_type.name}}_2};

{{#each entry_type.fields}}
  {{#if linked_from}}
    {{#if (ne linked_from.hash_type "AgentPubKey")}}
      {{#if (ne (pascal_case linked_from.name) (pascal_case ../entry_type.name))}}
use common::{create_{{snake_case linked_from.name}}, sample_{{snake_case linked_from.name}}_1, sample_{{snake_case linked_from.name}}_2};
      {{/if}}
    {{/if}}
  {{/if}}
{{/each}}

#[tokio::test(flavor = "multi_thread")]
async fn create_{{snake_case entry_type.name}}_test() {
    // Use prebuilt dna file
    let dna_path = std::env::current_dir()
        .unwrap()
        .join("../../../workdir/{{dna_role_name}}.dna");
    let dna = SweetDnaFile::from_bundle(&dna_path).await.unwrap();

    // Set up conductors
    let mut conductors = SweetConductorBatch::from_config(2, ConductorConfig::default()).await;
    let apps = conductors.setup_app("{{dna_role_name}}", &[dna]).await.unwrap();
    conductors.exchange_peer_info().await;

    let ((alice,), (_bobbo,)) = apps.into_tuples();
    
    let alice_zome = alice.zome("{{snake_case coordinator_zome_manifest.name}}");
    
    let sample = sample_{{snake_case entry_type.name}}_1(&conductors[0], &alice_zome).await;
    
    // Alice creates a {{pascal_case entry_type.name}}
    let record: Record = create_{{snake_case entry_type.name}}(&conductors[0], &alice_zome, sample.clone()).await;
    let entry: {{pascal_case entry_type.name}} = record.entry().to_app_option().unwrap().unwrap();
    assert!(entry.eq(&sample));
}


#[tokio::test(flavor = "multi_thread")]
async fn create_and_read_{{snake_case entry_type.name}}() {
    // Use prebuilt dna file
    let dna_path = std::env::current_dir()
        .unwrap()
        .join("../../../workdir/{{dna_role_name}}.dna");
    let dna = SweetDnaFile::from_bundle(&dna_path).await.unwrap();

    // Set up conductors
    let mut conductors = SweetConductorBatch::from_config(2, ConductorConfig::default()).await;
    let apps = conductors.setup_app("{{dna_role_name}}", &[dna]).await.unwrap();
    conductors.exchange_peer_info().await;

    let ((alice,), (bobbo,)) = apps.into_tuples();
    
    let alice_zome = alice.zome("{{snake_case coordinator_zome_manifest.name}}");
    let bob_zome = bobbo.zome("{{snake_case coordinator_zome_manifest.name}}");
    
    let sample = sample_{{snake_case entry_type.name}}_1(&conductors[0], &alice_zome).await;
    
    // Alice creates a {{pascal_case entry_type.name}}
    let record: Record = create_{{snake_case entry_type.name}}(&conductors[0], &alice_zome, sample.clone()).await;
    
    consistency_10s([&alice, &bobbo]).await;
    
    let get_record: Option<Record> = conductors[1]
        .call(&bob_zome, "get_{{snake_case entry_type.name}}", {{#if entry_type.reference_entry_hash}}record.action().entry_hash().unwrap().clone(){{else}}record.signed_action.action_address().clone(){{/if}})
        .await;
        
    assert_eq!(record, get_record.unwrap());    
}

{{#if crud.update}}
#[tokio::test(flavor = "multi_thread")]
async fn create_and_update_{{snake_case entry_type.name}}() {
    // Use prebuilt dna file
    let dna_path = std::env::current_dir()
        .unwrap()
        .join("../../../workdir/{{dna_role_name}}.dna");
    let dna = SweetDnaFile::from_bundle(&dna_path).await.unwrap();

    // Set up conductors
    let mut conductors = SweetConductorBatch::from_config(2, ConductorConfig::default()).await;
    let apps = conductors.setup_app("{{dna_role_name}}", &[dna]).await.unwrap();
    conductors.exchange_peer_info().await;

    let ((alice,), (bobbo,)) = apps.into_tuples();
    
    let alice_zome = alice.zome("{{snake_case coordinator_zome_manifest.name}}");
    let bob_zome = bobbo.zome("{{snake_case coordinator_zome_manifest.name}}");
    
    let sample_1 = sample_{{snake_case entry_type.name}}_1(&conductors[0], &alice_zome).await;
    
    // Alice creates a {{pascal_case entry_type.name}}
    let record: Record = create_{{snake_case entry_type.name}}(&conductors[0], &alice_zome, sample_1.clone()).await;
    let original_action_hash = record.signed_action.hashed.hash.clone();
        
    consistency_10s([&alice, &bobbo]).await;
    
    let sample_2 = sample_{{snake_case entry_type.name}}_2(&conductors[0], &alice_zome).await;
    let input = Update{{pascal_case entry_type.name}}Input {
{{#if link_from_original_to_each_update}}
      original_{{snake_case entry_type.name}}_hash: original_action_hash.clone(),
{{/if}}
      previous_{{snake_case entry_type.name}}_hash: original_action_hash.clone(),
      updated_{{snake_case entry_type.name}}: sample_2.clone(),
    };
    
    // Alice updates the {{pascal_case entry_type.name}}
    let update_record: Record = conductors[0]
        .call(&alice_zome, "update_{{snake_case entry_type.name}}", input)
        .await;
        
    let entry: {{pascal_case entry_type.name}} = update_record.entry().to_app_option().unwrap().unwrap();
    assert_eq!(sample_2, entry);
    
    consistency_10s([&alice, &bobbo]).await;
    
    let get_record: Option<Record> = conductors[1]
        .call(&bob_zome, "get_{{snake_case entry_type.name}}", original_action_hash.clone())
        .await;
  
    assert_eq!(update_record, get_record.unwrap());
    
    let input = Update{{pascal_case entry_type.name}}Input {
{{#if link_from_original_to_each_update}}
      original_{{snake_case entry_type.name}}_hash: original_action_hash.clone(),
{{/if}}
      previous_{{snake_case entry_type.name}}_hash: update_record.signed_action.hashed.hash.clone(),
      updated_{{snake_case entry_type.name}}: sample_1.clone(),
    };
    
    // Alice updates the {{pascal_case entry_type.name}} again
    let update_record: Record = conductors[0]
        .call(&alice_zome, "update_{{snake_case entry_type.name}}", input)
        .await;
        
    let entry: {{pascal_case entry_type.name}} = update_record.entry().to_app_option().unwrap().unwrap();
    assert_eq!(sample_1, entry);
    
    consistency_10s([&alice, &bobbo]).await;
    
    let get_record: Option<Record> = conductors[1]
        .call(&bob_zome, "get_{{snake_case entry_type.name}}", original_action_hash.clone())
        .await;
  
    assert_eq!(update_record, get_record.unwrap());
}
{{/if}}

{{#if crud.delete}}
#[tokio::test(flavor = "multi_thread")]
async fn create_and_delete_{{snake_case entry_type.name}}() {
    // Use prebuilt dna file
    let dna_path = std::env::current_dir()
        .unwrap()
        .join("../../../workdir/{{dna_role_name}}.dna");
    let dna = SweetDnaFile::from_bundle(&dna_path).await.unwrap();

    // Set up conductors
    let mut conductors = SweetConductorBatch::from_config(2, ConductorConfig::default()).await;
    let apps = conductors.setup_app("{{dna_role_name}}", &[dna]).await.unwrap();
    conductors.exchange_peer_info().await;

    let ((alice,), (bobbo,)) = apps.into_tuples();
    
    let alice_zome = alice.zome("{{snake_case coordinator_zome_manifest.name}}");
    let bob_zome = bobbo.zome("{{snake_case coordinator_zome_manifest.name}}");
    
    let sample_1 = sample_{{snake_case entry_type.name}}_1(&conductors[0], &alice_zome).await;
    
    // Alice creates a {{pascal_case entry_type.name}}
    let record: Record = create_{{snake_case entry_type.name}}(&conductors[0], &alice_zome, sample_1.clone()).await;
    let original_action_hash = record.signed_action.hashed.hash;
    
    // Alice deletes the {{pascal_case entry_type.name}}
    let _delete_action_hash: ActionHash = conductors[0]
        .call(&alice_zome, "delete_{{snake_case entry_type.name}}", original_action_hash.clone())
        .await;

    consistency_10s([&alice, &bobbo]).await;

    let get_record: Option<Record> = conductors[1]
        .call(&bob_zome, "get_{{snake_case entry_type.name}}", original_action_hash.clone())
        .await;
        
    assert!(get_record.is_none());
}
{{/if}}
