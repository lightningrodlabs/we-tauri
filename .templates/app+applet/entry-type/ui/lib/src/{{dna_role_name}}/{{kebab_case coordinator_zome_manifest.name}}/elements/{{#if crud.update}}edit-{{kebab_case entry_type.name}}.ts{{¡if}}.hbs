import { LitElement, html } from 'lit';
import { repeat } from "lit/directives/repeat.js";
import { state, customElement, property } from 'lit/decorators.js';
import { ActionHash, Record, EntryHash, AgentPubKey } from '@holochain/client';
import { EntryRecord } from '@holochain-open-dev/utils';
import { hashState, notifyError, sharedStyles, hashProperty, wrapPathInSvg, onSubmit } from '@holochain-open-dev/elements';
import { consume } from '@lit-labs/context';
import { localized, msg } from '@lit/localize';
import { mdiAlertCircleOutline, mdiDelete } from '@mdi/js';

{{#uniq_lines}}
import '@shoelace-style/shoelace/dist/components/card/card.js';
import '@shoelace-style/shoelace/dist/components/icon/icon.js';
import SlAlert from '@shoelace-style/shoelace/dist/components/alert/alert.js';
import '@shoelace-style/shoelace/dist/components/alert/alert.js';
import '@shoelace-style/shoelace/dist/components/button/button.js';
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/edit/imports") }}

    {{/if}}
  {{/each}}
{{/uniq_lines}}

import { {{pascal_case coordinator_zome_manifest.name}}Store } from '../{{kebab_case coordinator_zome_manifest.name}}-store';
import { {{camel_case coordinator_zome_manifest.name}}StoreContext } from '../context';
import { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from '../types';

/**
 * @element edit-{{kebab_case entry_type.name}}
 * @fires {{kebab_case entry_type.name}}-updated: detail will contain { {{#if link_from_original_to_each_update}}original{{pascal_case entry_type.name}}Hash, {{/if}}previous{{pascal_case entry_type.name}}Hash, updated{{pascal_case entry_type.name}}Hash }
 */
@localized()
@customElement('edit-{{kebab_case entry_type.name}}')
export class Edit{{pascal_case entry_type.name}} extends LitElement {

{{#if link_from_original_to_each_update}}
  // REQUIRED. The hash of the original `Create` action for this {{pascal_case entry_type.name}}
  @property(hashProperty('original-{{kebab_case entry_type.name}}-hash'))
  original{{pascal_case entry_type.name}}Hash!: ActionHash;
{{/if}}
  
  // REQUIRED. The current {{pascal_case entry_type.name}} record that should be updated
  @property()
  currentRecord!: EntryRecord<{{pascal_case entry_type.name}}>;
  
  /**
   * @internal
   */
  @consume({ context: {{camel_case coordinator_zome_manifest.name}}StoreContext })
  {{camel_case coordinator_zome_manifest.name}}Store!: {{pascal_case coordinator_zome_manifest.name}}Store;

  /**
   * @internal
   */
  @state()
  committing = false;
   
{{#each entry_type.fields}}
  {{#if widget}}
    {{#if (eq cardinality "vector")}}
  /**
   * @internal
   */
  @state()
  _{{camel_case field_name}}Fields = this.currentRecord.entry.{{snake_case field_name}}.map((_, index) => index);
    {{/if}}
  {{/if}}
{{/each}}

  firstUpdated() {
    this.shadowRoot?.querySelector('form')!.reset();
  }

  async update{{pascal_case entry_type.name}}(fields: any) {  
    const {{camel_case entry_type.name}}: {{pascal_case entry_type.name}} = { 
    {{#each entry_type.fields}}
      {{#if widget}}
        {{#if (eq cardinality "vector")}}
      {{snake_case field_name}}: (Array.isArray(fields.{{snake_case field_name}}) ? fields.{{snake_case field_name}} : [fields.{{snake_case field_name}}]).map((el: any) => {{> (concat field_type.type "/" widget "/edit/to-value") field_name=field_name variable_to_read="el" }}),
        {{else}}
      {{snake_case field_name}}: {{> (concat field_type.type "/" widget "/edit/to-value") field_name=field_name variable_to_read=(concat "fields." (snake_case field_name)) }},
        {{/if}}
      {{else}}
      {{snake_case field_name}}: this.currentRecord.entry.{{snake_case field_name}},
      {{/if}}
    {{/each}}
    };

    try {
      this.committing = true;
      const updateRecord = await this.{{camel_case coordinator_zome_manifest.name}}Store.client.update{{pascal_case entry_type.name}}(
  {{#if link_from_original_to_each_update}}
        this.original{{pascal_case entry_type.name}}Hash,
  {{/if}}
        this.currentRecord.actionHash,
        {{camel_case entry_type.name}}
      );
  
      this.dispatchEvent(new CustomEvent('{{kebab_case entry_type.name}}-updated', {
        composed: true,
        bubbles: true,
        detail: {
{{#if link_from_original_to_each_update}}
          original{{pascal_case entry_type.name}}Hash: this.original{{pascal_case entry_type.name}}Hash,
{{/if}}
          previous{{pascal_case entry_type.name}}Hash: this.currentRecord.actionHash,
          updated{{pascal_case entry_type.name}}Hash: updateRecord.actionHash
        }
      }));
    } catch (e: any) {
      console.error(e);
      notifyError(msg("Error updating the {{lower_case entry_type.name}}"));
    }
    
    this.committing = false;
  }

  render() {
    return html`
      <sl-card>
        <span slot="header">${msg("Edit {{title_case entry_type.name}}")}</span>

        <form 
          style="display: flex; flex: 1; flex-direction: column;"
          ${onSubmit(fields => this.update{{pascal_case entry_type.name}}(fields))}
        >  
        {{#each entry_type.fields}}
          {{#if widget}}
          <div style="margin-bottom: 16px">
            {{#if (not (eq cardinality "vector") )}}
        {{> (concat field_type.type "/" widget "/edit/render") label=(title_case field_name) edit=true field_name=field_name required=(eq cardinality "single") default_value=(concat "this.currentRecord.entry." (snake_case field_name) ) }}
            {{else}}
        {{> Vec/edit/render field_name=field_name field_type=field_type edit=true widget=widget }}
            {{/if}}
          </div>

          {{/if}}
        {{/each}}


          <div style="display: flex; flex-direction: row">
            <sl-button
              @click=${() => this.dispatchEvent(new CustomEvent('edit-canceled', {
                bubbles: true,
                composed: true
              }))}
              style="flex: 1;"
            >${msg("Cancel")}</sl-button>
            <sl-button
              type="submit"
              variant="primary"
              style="flex: 1;"
              .loading=${this.committing}
            >${msg("Save")}</sl-button>

          </div>
        </form>
      </sl-card>`;
  }

  static styles = [sharedStyles];
}
