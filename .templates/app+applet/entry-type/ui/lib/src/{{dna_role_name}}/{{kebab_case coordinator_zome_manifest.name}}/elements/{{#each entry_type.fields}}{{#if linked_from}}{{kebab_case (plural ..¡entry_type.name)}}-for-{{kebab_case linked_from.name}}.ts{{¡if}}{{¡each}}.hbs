import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { Record, EntryHash, ActionHash, AgentPubKey } from '@holochain/client';
import { StoreSubscriber } from '@holochain-open-dev/stores';
import { RecordBag, EntryRecord } from '@holochain-open-dev/utils';
import { hashProperty, sharedStyles, wrapPathInSvg } from '@holochain-open-dev/elements';
import { consume } from '@lit-labs/context';
import { localized, msg } from '@lit/localize';
import { mdiInformationOutline } from '@mdi/js';

import '@holochain-open-dev/elements/dist/elements/display-error.js';
import '@shoelace-style/shoelace/dist/components/spinner/spinner.js';
import '@shoelace-style/shoelace/dist/components/icon/icon.js';

import { {{pascal_case ../coordinator_zome_manifest.name}}Store } from '../{{kebab_case ../coordinator_zome_manifest.name}}-store.js';
import { {{camel_case ../coordinator_zome_manifest.name}}StoreContext } from '../context.js';
import { {{pascal_case ../entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from '../types.js';

{{#if (not (eq linked_from.hash_type "AgentPubKey") )}}
import './{{kebab_case ../entry_type.name}}-summary.js';
{{else}}
import '@holochain-open-dev/profiles/dist/elements/agent-avatar.js';
{{/if}}

/**
 * @element {{kebab_case (plural ../entry_type.name)}}-for-{{kebab_case linked_from.name}}
 */
@localized()
@customElement('{{kebab_case (plural ../entry_type.name)}}-for-{{kebab_case linked_from.name}}')
export class {{pascal_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}} extends LitElement {

  // REQUIRED. The {{pascal_case linked_from.singular_arg}} for which the {{pascal_case (plural ../entry_type.name)}} should be fetched
  @property(hashProperty('{{kebab_case linked_from.singular_arg}}'))
  {{camel_case linked_from.singular_arg}}!: {{linked_from.hash_type}};

  /**
   * @internal
   */
  @consume({ context: {{camel_case ../coordinator_zome_manifest.name}}StoreContext, subscribe: true })
  {{camel_case ../coordinator_zome_manifest.name}}Store!: {{pascal_case ../coordinator_zome_manifest.name}}Store;
  
  /**
   * @internal
   */
  _{{camel_case (plural ../entry_type.name)}} = new StoreSubscriber(this, () =>
    this.{{camel_case ../coordinator_zome_manifest.name}}Store.{{camel_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}}.get(this.{{camel_case linked_from.singular_arg}})
  );

  renderList(hashes: Array<{{#if ../entry_type.reference_entry_hash}}EntryHash{{else}}ActionHash{{/if}}>) {
    if (hashes.length === 0) 
      return html` <div class="column center-content">
        <sl-icon
          style="color: grey; height: 64px; width: 64px; margin-bottom: 16px"
          .src=${wrapPathInSvg(mdiInformationOutline)}
        ></sl-icon>
        <span class="placeholder">${msg("No {{lower_case (plural ../entry_type.name)}} found for this {{lower_case linked_from.name}}")}</span>
      </div>`;

    return html`
      <div style="display: flex; flex-direction: column">
        ${hashes.map(hash =>
          html`<{{kebab_case ../entry_type.name}}-summary .{{camel_case ../entry_type.name}}Hash=${hash}></{{kebab_case ../entry_type.name}}-summary>`
        )}
      </div>
    `;
  }

  render() {
    switch (this._{{camel_case (plural ../entry_type.name)}}.value.status) {
      case "pending":
        return html`<div
          style="display: flex; flex: 1; align-items: center; justify-content: center"
        >
          <sl-spinner style="font-size: 2rem;"></sl-spinner>
        </div>`;
      case "complete": 
        return this.renderList(this._{{camel_case (plural ../entry_type.name)}}.value.value);
      case "error":
        return html`<display-error 
          .headline=${msg("Error fetching the {{lower_case (plural ../entry_type.name)}}")}
          .error=${this._{{camel_case (plural ../entry_type.name)}}.value.error.data.data}
        ></display-error>`;
    }
  }
  
  static styles = [sharedStyles];
}
